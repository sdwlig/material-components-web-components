/**
@license
Copyright 2018 Google Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Copyright 2016 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

@import "@material/rtl/mixins";
@import "@material/theme/mixins";
@import "@material/shape/mixins";
@import "@material/ripple/mixins";
@import "@material/theme/functions";
@import "@material/typography/mixins";
@import "@material/typography/variables";
@import "@material/feature-targeting/functions";
@import "@material/feature-targeting/mixins";
@import "@material/list/variables";

//
// Public
//

@mixin mdc-list-core-styles($query: mdc-feature-all()) {
  @include mdc-list-without-ripple($query);
  @include mdc-list-ripple($query);
}

// This API is intended for use by frameworks that may want to separate the ripple-related styles from the other
// list styles. It is recommended that most users use `mdc-list-core-styles` instead.
@mixin mdc-list-without-ripple($query: mdc-feature-all()) {
  $feat-color: mdc-feature-create-target($query, color);
  $feat-structure: mdc-feature-create-target($query, structure);
  $feat-typography: mdc-feature-create-target($query, typography);

  $item-primary-text-baseline-height: 32px;
  $item-secondary-text-baseline-height: 20px;
  $dense-item-primary-text-baseline-height: 24px;
  $divider-color: if(
    mdc-theme-tone($mdc-theme-background) == "dark",
    $mdc-list-divider-color-on-dark-bg,
    $mdc-list-divider-color-on-light-bg
  );

  .mdc-list {
    @include mdc-list-base_($query);
  }

  @include mdc-list-item-secondary-text-ink-color(text-secondary-on-background, $query);
  @include mdc-list-item-graphic-fill-color(transparent, $query);
  @include mdc-list-item-graphic-ink-color(text-icon-on-background, $query);
  @include mdc-list-item-meta-ink-color(text-hint-on-background, $query);
  @include mdc-list-group-subheader-ink-color(text-primary-on-background, $query);

  .mdc-list-divider {
    @include mdc-feature-targets($feat-structure) {
      height: 0;
      margin: 0;
      border: none;
      border-bottom-width: 1px;
      border-bottom-style: solid;
    }
  }

  // Note: ideally we'd be able to hoist this to the top-level `$feat-color`, but doing so
  // will cause the `border` declaration on `.mdc-list-divider` above to override it.
  @include mdc-list-divider-color($divider-color, $query);

  .mdc-list-divider--padded {
    @include mdc-feature-targets($feat-structure) {
      // Leave gaps on each side to match the padding on list items
      margin: 0 $mdc-list-side-padding;
    }
  }

  .mdc-list-divider--inset {
    @include mdc-feature-targets($feat-structure) {
      @include mdc-rtl-reflexive-box(margin, left, $mdc-list-text-offset, ".mdc-list-group");

      width: calc(100% - #{$mdc-list-text-offset});
    }
  }

  .mdc-list-divider--inset.mdc-list-divider--padded {
    @include mdc-feature-targets($feat-structure) {
      width: calc(100% - #{$mdc-list-text-offset} - #{$mdc-list-side-padding});
    }
  }

}

@mixin mdc-list-divider-color($color, $query: mdc-feature-all()) {
  $feat-color: mdc-feature-create-target($query, color);

  .mdc-list-divider {
    @include mdc-feature-targets($feat-color) {
      @include mdc-theme-prop(border-bottom-color, $color);
    }
  }
}


//
// Private
//

@mixin mdc-list-base_($query: mdc-feature-all()) {
  $feat-color: mdc-feature-create-target($query, color);
  $feat-structure: mdc-feature-create-target($query, structure);
  $feat-typography: mdc-feature-create-target($query, typography);

  @include mdc-typography(subtitle1, $query);

  @include mdc-feature-targets($feat-typography) {
    // According to the mocks and stickersheet, the line-height is
    // adjusted to 24px for text content, same as for body1.
    /* @alternate */
    line-height: map-get(map-get($mdc-typography-styles, body1), line-height);
  }

  @include mdc-feature-targets($feat-structure) {
    margin: 0;
    padding: 8px 0;
    list-style-type: none;
  }

  @include mdc-list-item-primary-text-ink-color(text-primary-on-background, $query);
}

@mixin mdc-list-item-base_ {
  display: flex;
  position: relative;
  align-items: center;
  justify-content: flex-start;
  height: 48px;
  padding: 0 $mdc-list-side-padding;
  overflow: hidden;

  &:focus {
    outline: none;
  }
}

// Ripple styles for an interactive list item (one that is enabled and inside an interactive list).
@mixin mdc-list-item-interactive-ripple_($query: mdc-feature-all()) {
  @include mdc-ripple-surface($query);
  @include mdc-ripple-radius-bounded($query: $query);
  @include mdc-states(mdc-theme-prop-value(on-surface), false, $query);
  @include mdc-states-activated(primary, false, $query);
  @include mdc-states-selected(primary, false, $query);
}

// Sets the width and height of the graphic element, as well as calculates the margins for
// the graphic element such that the text is always offset by 72px, which is defined within
// the spec.
@mixin mdc-list-graphic-size_($size) {
  $text-offset: 72px;
  $side-padding: $mdc-list-side-padding;
  $margin-value: $text-offset - $side-padding - $size;

  @include mdc-rtl-reflexive-box(margin, right, $margin-value, ".mdc-list-item");

  width: $size;
  height: $size;
}
